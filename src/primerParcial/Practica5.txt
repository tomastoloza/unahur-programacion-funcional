{- 1. Dar expresiones lambda para las siguientes funciones.
suma

suma = \x y -> x + y

snd = \(_, y) -> y

head = \(x:_) -> x consultar

twice = \f (\x -> f (f x))  

twice twice = \x -> twice (twice x)

2. Dar el tipo de las siguientes funciones.

apply :: (a -> b) -> a -> b
apply f = g
    where g x = f x

apply :: (a -> b) -> (c -> d)   
x::a y x::c => a == c
g x :: d y f x :: d => b == d    

flip :: (a -> b -> c) -> (b -> a -> c)
flip f = g
    where g x y = f y x

appDup :: ((b, b) -> a) -> b -> a
appDup f = g
    where g x = f (x, x)

appFork :: (d -> a, d -> b) -> d -> (a, b)
appFork (f, g) = h
    where h x = ( f x , g x )

3. Teniendo en cuenta las definiciones anteriores, dar el tipo de las siguientes expresiones
y escribirlas con expresiones lambda.

apply fst :: (a, b) -> a  
apply' => \f -> (\(x, y) -> f x)

twice twice 
Twice' => \f  (\x -> f -> f (f x))

twice flip :: (a -> a -> c) -> (a -> a -> c) 
twice flip
twice'' => \f -> \x y -> f (f y x) 


appDup appFork
appDup' => \f -> \x -> \(g, y) -> f (g y)

-}
